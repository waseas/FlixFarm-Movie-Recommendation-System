User Apis::

User model -
username, password, type (normal/critic), reviews, ratings

-----------------
login - post /users/login

signup - post /users/signup

get - get /users (get all users)

get - get /users/:userId (find one user)

update - put /users/:userId - pass new user json through body, it will overwrite/replace the existing user object in mongo for the userId passed as param.

delete - delete /users/:userId

logout - post /users/logout

profile - get /users/profile - retrieves the current logged in user.

------------------
If user with username already exists -
/signup
returns
{
    "message": "User validation failed: username: is already taken."
}
-------------

Reviews model -
 username,movieId,body,title,reviewId (_id)

 ------------
post - /reviews - create new review - pass in req.body
get - /reviews - example - localhost:3000/reviews?movieId=123456&reviewId=5caa2f6e34a4e7189ef199b8 - fetches reviews for specified reviewId and movieId
put - /reviews/:reviewId - pass in req.body - overwrites existing review
delete - /reviews/:deleteId - deletes for reviewId

get - /users/:userId/reviews - fetches all the reviews for userId

---------------

Follow API -
post - /users/:userId/follow/:followId - makes user with userId follow user with followId
post - /users/:userId/unfollow/:followId - makes user with userId unfollow user with followId

---------------

Watchlist API -
post - /users/:userId/watchlist/:movieId pass movieName, imageUrl in body
post - /users/:userId/unwatchlist/:movieId

---------------
SearchByUsername API -
get - /users/search/:username - search users with matching username
